genderDF %>%
plot_ly(x = Status, y = TotalPayBenefits, type = "bar", color = gender)
dev.off()
genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01) &
TotalPayBenefits>=quantile(TotalPayBenefits, .99))
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01) &
TotalPayBenefits<=quantile(TotalPayBenefits, .99))
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01) &&
TotalPayBenefits<=quantile(TotalPayBenefits, .99))
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
str(genderDF)
genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01),
TotalPayBenefits<=quantile(TotalPayBenefits, .99))
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
genderDF %>% select(Status,gender,TotalPayBenefits)
genderStatusDF<-genderDF %>% select(Status,gender,TotalPayBenefits)
genderStatusDF<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01),
TotalPayBenefits<=quantile(TotalPayBenefits, .99)) %>%
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
View(genderStatusDF)
View(genderStatusDF)
library("tidyr", lib.loc="C:/Program Files/R/R-3.2.5/library")
genderStatusDF
genderStatusDF %>% spread(key=gender, value=meanSalary)
genderStatusDF %>% spread(key=gender, value=meanSalary) %>%
mutate(gap=male-female)
genderStatusDF %>% spread(key=gender, value=meanSalary) %>%
mutate(gap=male-female)
genderStatusDF<-genderStatusDF %>% spread(key=gender, value=meanSalary) %>%
mutate(gap=male-female)
genderStatusDF <- genderStatusDF[order(genderStatusDF$male), ]
p <- plot_ly(genderStatusDF, x = female, y = Status, name = "Women",
mode = "markers", marker = list(color = "pink")) %>%
add_trace(x = male, name = "Men", marker = list(color = "blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary"),
margin = list(l = 65)
)
p
genderStatusDF
genderStatusDF
str(genderStatusDF)
p <- plot_ly(genderStatusDF, x = female, y = Status, name = "Women",
mode = "markers", marker = list(color = "pink")) %>%
add_trace(x = male, name = "Men", marker = list(color = "blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary"))
p
s <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
s <- s[order(s$Men), ]
library(plotly)
p <- plot_ly(s, x = Women, y = School, name = "Women",
mode = "markers", marker = list(color = "pink")) %>%
add_trace(x = Men, name = "Men", marker = list(color = "blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
p
s <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
s <- s[order(s$Men), ]
library(plotly)
p <- plot_ly(s, x = Women, y = School, name = "Women",
mode = "markers", marker = list(color = "pink")) %>%
add_trace(x = Men, name = "Men", marker = list(color = "blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
p
install.packages("plotly")
s <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
s <- s[order(s$Men), ]
library(plotly)
p <- plot_ly(s, x = Women, y = School, name = "Women",
mode = "markers", marker = list(color = "pink")) %>%
add_trace(x = Men, name = "Men", marker = list(color = "blue")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
p
pacman::p_load(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr, DT, plotly, ggalt, tidyr)
pacman::p_loaded(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr,DT, plotly, ggalt, tidyr)
df <- arrange(genderStatusDF, desc(male))
df <- mutate(genderStatusDF, School=factor(School, levels=rev(School)))
gg <- ggplot(genderStatusDF, aes(x=female, xend=male, y=Status))
gg <- gg + geom_dumbbell(colour="#686868",
point.colour.l="#ffc0cb",
point.colour.r="#0000ff",
point.size.l=2.5,
point.size.r=2.5)
devtools::install_github("hrbrmstr/ggalt")
detach("package:ggalt", unload=TRUE)
library("ggalt", lib.loc="C:/Program Files/R/R-3.2.5/library")
gg <- ggplot(genderStatusDF, aes(x=female, xend=male, y=Status))
gg <- gg + geom_dumbbell(colour="#686868",
point.colour.l="#ffc0cb",
point.colour.r="#0000ff",
point.size.l=2.5,
point.size.r=2.5)
gg <- gg + scale_x_continuous(breaks=seq(60, 160, by=20),
labels=sprintf("$%sK", comma(seq(60, 160, by=20))))
pacman::p_load(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr, DT, plotly, ggalt, tidyr,
scale)
#check that packages were loaded
pacman::p_loaded(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr,DT, plotly, ggalt, tidyr,
scale)
pacman::p_load(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr, DT, plotly, ggalt, tidyr,
scales)
#check that packages were loaded
pacman::p_loaded(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr,DT, plotly, ggalt, tidyr,
scales)
gg <- ggplot(genderStatusDF, aes(x=female, xend=male, y=Status))
gg <- gg + geom_dumbbell(colour="#686868",
point.colour.l="#ffc0cb",
point.colour.r="#0000ff",
point.size.l=2.5,
point.size.r=2.5)
gg <- gg + scale_x_continuous(breaks=seq(60, 160, by=20),
labels=sprintf("$%sK", comma(seq(60, 160, by=20))))
gg
gg <- ggplot(genderStatusDF, aes(x=female, xend=male, y=Status))
gg <- gg + geom_dumbbell(colour="#686868",
point.colour.l="#ffc0cb",
point.colour.r="#0000ff",
point.size.l=2.5,
point.size.r=2.5)
gg <- gg + scale_x_continuous(breaks=seq(60, 160, by=20),
labels=sprintf("$%sK", comma(seq(60, 160, by=20))))
gg <- gg + labs(x="Annual Salary", y=NULL,
title="Gender Earnings Disparity")
gg <- gg + theme_bw()
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.title.x=element_text(hjust=1, face="italic", margin=margin(t=-24)))
gg <- gg + theme(plot.caption=element_text(size=8, margin=margin(t=24)))
gg
gg <- ggplot(genderStatusDF, aes(x=female, xend=male, y=Status))
gg <- gg + geom_dumbbell(colour="#686868",
point.colour.l="#ffc0cb",
point.colour.r="#0000ff",
point.size.l=2.5,
point.size.r=2.5)
gg <- gg + scale_x_continuous(breaks=seq(60, 160, by=20),
labels=sprintf("$%sK", comma(seq(60, 160, by=20))))
gg <- gg + labs(x="Annual Salary", y=NULL,
title="Gender Earnings Disparity")
gg <- gg + theme_bw()
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.title.x=element_text(hjust=1, face="italic", margin=margin(t=-24)))
gg
gg <- ggplot(genderStatusDF, aes(x=female, xend=male, y=Status))
gg <- gg + geom_dumbbell(colour="#686868",
point.colour.l="#ffc0cb",
point.colour.r="#0000ff",
point.size.l=2.5,
point.size.r=2.5)
gg <- gg + scale_x_continuous()
gg <- gg + labs(x="Annual Salary", y=NULL,
title="Gender Earnings Disparity")
gg <- gg + theme_bw()
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.title.x=element_text(hjust=1, face="italic", margin=margin(t=-24)))
gg
gg <- ggplot(genderStatusDF, aes(x=female, xend=male, y=Status))
gg <- gg + geom_dumbbell(colour="#686868",
point.colour.l="#ffc0cb",
point.colour.r="#0000ff",
point.size.l=2.5,
point.size.r=2.5)
gg <- gg + scale_x_continuous(breaks=seq(0, 300000, by=25000),
labels=sprintf("$%sK", comma(seq(0, 300000, by=25000))))
gg <- gg + labs(x="Annual Salary", y=NULL,
title="Gender Earnings Disparity")
gg <- gg + theme_bw()
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(panel.grid.minor=element_blank())
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(axis.title.x=element_text(hjust=1, face="italic", margin=margin(t=-24)))
gg
library(tidyr)
library(plotly)
s <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv")
s <- s[order(s$Men), ]
gather(s, Sex, value, Women, Men) %>%
plot_ly(x = value, y = School, mode = "markers",
color = Sex, colors = c("pink", "blue")) %>%
add_trace(x = value, y = School, mode = "lines",
group = School, showlegend = F, line = list(color = "gray")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
genderStatusDF <- genderStatusDF[order(genderStatusDF$male), ]
gather(genderStatusDF, Sex, value, female, male) %>%
plot_ly(x = value, y = Status, mode = "markers",
color = Sex, colors = c("pink", "blue")) %>%
add_trace(x = value, y = Status, mode = "lines",
group = Status, showlegend = F, line = list(color = "gray")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)"),
margin = list(l = 65)
)
gather(genderStatusDF, Sex, value, female, male) %>%
plot_ly(x = value, y = Status, mode = "markers",
color = Sex, colors = c("pink", "blue")) %>%
add_trace(x = value, y = Status, mode = "lines",
group = Status, showlegend = F, line = list(color = "gray")) %>%
layout(
title = "Gender earnings disparity",
xaxis = list(title = "Annual Salary (in thousands)")
)
genderStatusDF<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01),
TotalPayBenefits<=quantile(TotalPayBenefits, .99)) %>%
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
genderStatusDF  %>%
plot_ly(x = Status, y = meanSalary, type = "bar", color = gender)
genderStatusDF
142664.10-127639.83
127639.83/142664.10
genderStatusDF<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
group_by(Status,gender) %>%
summarise(meanSalary=median(TotalPayBenefits))
genderStatusDF<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
group_by(Status,gender) %>%
summarise(medianSalary=median(TotalPayBenefits))
genderStatusDF  %>%
plot_ly(x = Status, y = medianSalary, type = "bar", color = gender)
genderStatusDF
115297.91/136500.28
pacman::p_load(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr, DT, plotly, ggalt, tidyr,
scales)
pacman::p_loaded(ggplot2, reader, gender,ggthemes, gridExtra,
GGally, stringr,dplyr,tm, yarrr,DT, plotly, ggalt, tidyr,
scales)
salaries<-read.csv("Salaries.csv", na.strings=c("Not Provided"," ",""),
strip.white = TRUE)
salaries$EmployeeName<-tolower(salaries$EmployeeName)
salaries$EmployeeName<-removePunctuation(salaries$EmployeeName)
salaries$EmployeeName<-trimws(salaries$EmployeeName, which="left")
filter(salaries, grepl('aaran', EmployeeName)) %>%
select(EmployeeName, JobTitle, Year, TotalPay)
salaries$EmployeeName <- gsub(" *\\b[[:alpha:]]{1}\\b *", " ",
salaries$EmployeeName)
salaries$name<-word(salaries$EmployeeName, 1)
genderDF<-salaries %>%
distinct(name) %>%
do(results = gender(.$name, method = "ssa")) %>%
do(bind_rows(.$results))
mergedDF<-salaries %>%
left_join(genderDF, by = c("name" = "name"))
rm(genderDF)
rm(salaries)
mergedDF %>% select(EmployeeName,JobTitle, TotalPayBenefits) %>%
arrange(desc(TotalPayBenefits)) %>%
head(10)
mergedDF %>% select(EmployeeName,JobTitle, TotalPayBenefits) %>%
arrange(desc(TotalPayBenefits)) %>%
tail(10)
mergedDF<-mergedDF %>% filter(EmployeeName!="not provided")
mergedDF<-mergedDF %>% filter(TotalPayBenefits>=0)
zeroPay<-mergedDF %>% filter(TotalPayBenefits==0) %>%
select(EmployeeName,JobTitle,TotalPayBenefits)
datatable(zeroPay)
mergedDF<-mergedDF %>% filter(TotalPayBenefits!=0)
theme_set(theme_solarized())
ggplot(mergedDF, aes(x=TotalPayBenefits/1000)) +
geom_histogram(aes(y = ..density..),
binwidth=density(mergedDF$TotalPayBenefits/1000)$bw) +
geom_density(fill="green", alpha = 0.2)+
facet_grid(.~Status)+
scale_x_continuous(breaks = seq(0,300,50), limits = c(0, 300))+
ggtitle("Density distributions of salary (in thousands) for each status")+
labs(y = "Density", x="Salary (thousands)")
genderDF<-mergedDF %>% filter(gender!='NA')
genderDF<-genderDF %>% filter(Status!='NA')
ggplot(mergedDF, aes(fill=gender))+
geom_histogram()+
facet_grid(.~Status)
genderDF %>% count(Status, gender) %>%
plot_ly(x = Status, y = n, type = "bar", color = gender)
genderDF %>% count(Status, gender)
countsDf<-genderDF %>% count(Status, gender)
ggplot(countsDf, aes(x=n, fill=gender))+
geom_bar()
countsDf<-genderDF %>% count(Status, gender)
ggplot(countsDf, aes(y=n, fill=gender, x=Status))+
geom_bar()
ggplot(countsDf, aes(y=n, x=Status))+
geom_bar()
ggplot(countsDf, aes(y=n, x=Status))+
geom_bar()
ggplot(countsDf, aes(x=Status))+
geom_bar()
ggplot(countsDf, aes(x=Status, y=n))+
geom_bar(stat=identity)
ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))
ggplotly()
ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Number of males and female full-time and part-time employees")+
labs(y = "Frequency", x="Status")
ggplotly()
ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Number of males and female full-time and part-time employees")+
labs(y = "# Employees", x="Status")
ggplotly()
barPlots<-grid.arrange(counts,meanPlot,meanPlot, nrow=1, ncol=3)
counts<-ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Number of males and female full-time and part-time employees")+
labs(y = "# Employees", x="Status")
meanPlot<-ggplot(data=meanGenderDf, aes(x=Status, y=meanSalary, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Mean Salary by gender and status")+
labs(y = "Mean Salary", x="Status")
meanPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")
barPlots<-grid.arrange(counts,meanPlot,meanPlot, nrow=1, ncol=3)
countsDf<-genderDF %>% count(Status, gender)
meanGenderDf<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01),
TotalPayBenefits<=quantile(TotalPayBenefits, .99)) %>%
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
medianGenderDF<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
group_by(Status,gender) %>%
summarise(medianSalary=median(TotalPayBenefits))
medianGenderDF<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
group_by(Status,gender) %>%
summarise(medianSalary=median(TotalPayBenefits))
counts<-ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Number of males and female full-time and part-time employees")+
labs(y = "# Employees", x="Status")
meanPlot<-ggplot(data=meanGenderDf, aes(x=Status, y=meanSalary, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Mean Salary by gender and status")+
labs(y = "Mean Salary", x="Status")
meanPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")
barPlots<-grid.arrange(counts,meanPlot,meanPlot, nrow=1, ncol=3)
ggplotly(barPlots)
ggplotly(p=barPlots)
barPlots
barPlots
barPlots
barPlots<-grid.arrange(counts,meanPlot,medianGenderDF, nrow=1, ncol=3)
countsDf<-genderDF %>% count(Status, gender)
meanGenderDf<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
filter(TotalPayBenefits>=quantile(TotalPayBenefits, .01),
TotalPayBenefits<=quantile(TotalPayBenefits, .99)) %>%
group_by(Status,gender) %>%
summarise(meanSalary=mean(TotalPayBenefits))
medianGenderDF<-genderDF %>% select(Status,gender,TotalPayBenefits) %>%
group_by(Status,gender) %>%
summarise(medianSalary=median(TotalPayBenefits))
counts<-ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Number of males and female full-time and part-time employees")+
labs(y = "# Employees", x="Status")
meanPlot<-ggplot(data=meanGenderDf, aes(x=Status, y=meanSalary, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Mean Salary by gender and status")+
labs(y = "Mean Salary", x="Status")
meanPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")
barPlots<-grid.arrange(counts,meanPlot,medianGenderDF, nrow=1, ncol=3)
barPlots<-grid.arrange(counts,meanPlot,medianPlot, nrow=1, ncol=3)
medianPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")
barPlots<-grid.arrange(counts,meanPlot,medianPlot, nrow=1, ncol=3)
barPlots
ggplotly(p=barPlots)
ggplotly()
medianPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")+
scale_x_continuous(breaks = seq(0,200,25), limits = c(0, 200))
medianPlot
medianPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")+
scale_y_continuous(breaks = seq(0,200,25), limits = c(0, 200))
medianPlot
ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary (in thousands)", x="Status")+
scale_y_continuous(breaks = seq(0,200,25), limits = c(0, 200),
labels=sprintf("$%sK"))
ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary (in thousands)", x="Status")+
scale_y_continuous(limits = c(0, 200),
labels=sprintf("$%sK", comma(seq(0, 200, by=20))))
ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary (in thousands)", x="Status")+
scale_y_continuous(limits = c(0, 200), breaks = seq(0,200,20)
labels=sprintf("$%sK", comma(seq(0, 200, by=20))))
ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary (in thousands)", x="Status")+
scale_y_continuous(limits = c(0, 200), breaks = seq(0,200,20),
labels=sprintf("$%sK", comma(seq(0, 200, by=20))))
medianPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")+
scale_y_continuous(breaks = seq(0,160,20),
labels=sprintf("$%sK", comma(seq(0, 160, by=20))))
medianPlot
counts<-ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Number of males and female full-time and part-time employees")+
labs(y = "# Employees", x="Status")
meanPlot<-ggplot(data=meanGenderDf, aes(x=Status, y=meanSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Mean Salary by gender and status")+
labs(y = "Mean Salary", x="Status")+
scale_y_continuous(breaks = seq(0,160,20),
labels=sprintf("$%sK", comma(seq(0, 160, by=20))))
medianPlot<-ggplot(data=medianGenderDF, aes(x=Status, y=medianSalary/1000, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Median Salary by gender and status")+
labs(y = "Median Salary", x="Status")+
scale_y_continuous(breaks = seq(0,160,20),
labels=sprintf("$%sK", comma(seq(0, 160, by=20))))
barPlots<-grid.arrange(counts,meanPlot,medianPlot, nrow=1, ncol=3)
barPlots
ggplotly()
countsDf<-genderDF %>% count(Status, gender)
counts<-ggplot(data=countsDf, aes(x=Status, y=n, fill=gender)) +
geom_bar(stat="identity", position=position_dodge(), colour="black") +
scale_fill_manual(values=c("#999999", "#E69F00"))+
ggtitle("Number of males and female full-time and part-time employees")+
labs(y = "# Employees", x="Status")
ggplotly(counts)
str(mergedDF)
